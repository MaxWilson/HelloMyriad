//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Gen


namespace rec Gen

module Animal =
    open HelloMyriad

    let toString (x: Animal) =
        match x with
        | Cat -> "Cat"
        | Dog -> "Dog"

    let fromString (x: string) =
        match x with
        | "Cat" -> Some Cat
        | "Dog" -> Some Dog
        | _ -> None

    let toTag (x: Animal) =
        match x with
        | Cat -> 0
        | Dog -> 1

    let isCat (x: Animal) =
        match x with
        | Cat -> true
        | _ -> false

    let isDog (x: Animal) =
        match x with
        | Dog -> true
        | _ -> false
namespace rec Gen

module Test1Lenses =
    open HelloMyriad

    let one =
        Optics.lens (fun (x: Test1) -> x.one) (fun (value: int)(x: Test1)  -> { x with one = value })

    let two =
        Optics.lens ((fun (x: Test1) -> x.two), (fun (x: Test1) (value: string) -> { x with two = value }))

    let three =
        Optics.lens ((fun (x: Test1) -> x.three), (fun (x: Test1) (value: float) -> { x with three = value }))

    let four =
        Optics.lens ((fun (x: Test1) -> x.four), (fun (x: Test1) (value: float32) -> { x with four = value }))

module Test2Lenses =
    open HelloMyriad

    let one =
        Optics.lens ((fun (x: Test2) -> x.one), (fun (x: Test2) (value: Test1) -> { x with one = value }))

    let two =
        Optics.lens ((fun (x: Test2) -> x.two), (fun (x: Test2) (value: string) -> { x with two = value }))
