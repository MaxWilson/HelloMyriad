//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Gen


namespace rec Gen

module Species =
    open HelloMyriad

    let toString (x: Species) =
        match x with
        | Cat -> "Cat"
        | Dog -> "Dog"
        | Lizard -> "Lizard"
        | Cow -> "Cow"

    let fromString (x: string) =
        match x with
        | "Cat" -> Some Cat
        | "Dog" -> Some Dog
        | "Lizard" -> Some Lizard
        | "Cow" -> Some Cow
        | _ -> None

    let toTag (x: Species) =
        match x with
        | Cat -> 0
        | Dog -> 1
        | Lizard -> 2
        | Cow -> 3

    let isCat (x: Species) =
        match x with
        | Cat -> true
        | _ -> false

    let isDog (x: Species) =
        match x with
        | Dog -> true
        | _ -> false

    let isLizard (x: Species) =
        match x with
        | Lizard -> true
        | _ -> false

    let isCow (x: Species) =
        match x with
        | Cow -> true
        | _ -> false
namespace rec Gen

module Animal =
    open HelloMyriad

    let name_ =
        Optics.lens (fun (data: Animal) -> data.name) (fun (value: Name) (data: Animal) -> { data with name = value })

    let kind_ =
        Optics.lens (fun (data: Animal) -> data.kind) (fun (value: Species) (data: Animal) -> { data with kind = value })

    let age_ =
        Optics.lens (fun (data: Animal) -> data.age) (fun (value: int) (data: Animal) -> { data with age = value })

module Barn =
    open HelloMyriad

    let sign_ =
        Optics.lens (fun (data: Barn) -> data.sign) (fun (value: Name) (data: Barn) -> { data with sign = value })

    let pets_ =
        Optics.lens (fun (data: Barn) -> data.pets) (fun (value: Animal list) (data: Barn) -> { data with pets = value })

module Name =
    open HelloMyriad

    let lens =
        Optics.lens (function
            | Name x -> x) (fun (value: string) (_: Name) -> Name value)
