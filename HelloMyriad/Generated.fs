//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Gen

module Test1 =
    open HelloMyriad

    let one (x: Test1) = x.one
    let two (x: Test1) = x.two
    let three (x: Test1) = x.three
    let four (x: Test1) = x.four

    let create (one: int) (two: string) (three: float) (four: float32): Test1 =
        { one = one
          two = two
          three = three
          four = four }

    let map
        (mapone: int -> int)
        (maptwo: string -> string)
        (mapthree: float -> float)
        (mapfour: float32 -> float32)
        (record': Test1)
        =
        { record' with
              one = mapone record'.one
              two = maptwo record'.two
              three = mapthree record'.three
              four = mapfour record'.four }
namespace rec Gen

module Animal =
    open HelloMyriad

    let toString (x: Animal) =
        match x with
        | Cat -> "Cat"
        | Dog -> "Dog"

    let fromString (x: string) =
        match x with
        | "Cat" -> Some Cat
        | "Dog" -> Some Dog
        | _ -> None

    let toTag (x: Animal) =
        match x with
        | Cat -> 0
        | Dog -> 1

    let isCat (x: Animal) =
        match x with
        | Cat -> true
        | _ -> false

    let isDog (x: Animal) =
        match x with
        | Dog -> true
        | _ -> false
